#include <stdio.h>
#include <string.h>
#include <openssl/sha.h>
#include <openssl/bn.h>
#include "SharedStorage.hpp"
#include "Keys.hpp"

namespace {
	namespace Retail {
		static u8 KeyXs[8][16] = {};
		static u8 KeyYs[8][16] = {};
		static u8 KeyNormals[20][16] = {};
		namespace SHA1Checksums {
			const static u8 KeyXs[8][20] = {
				{0x54, 0x70, 0x16, 0x86, 0x28, 0x3A, 0x18, 0xCA, 0x54, 0xFF, 0x76, 0xB6, 0x91, 0x0C, 0x49, 0xDE, 0xC2, 0xD6, 0xCF, 0x13}, //0x2C to 0x2F
				{0x00, 0x2B, 0xFC, 0x02, 0x27, 0xB7, 0x78, 0x30, 0xD6, 0x3E, 0x83, 0x6B, 0xA7, 0xCA, 0x7D, 0x1A, 0x94, 0x12, 0x7B, 0x18}, //0x30 to 0x33
				{0xDA, 0xAF, 0x39, 0xF4, 0x83, 0x25, 0x83, 0x6F, 0xA1, 0x72, 0x73, 0xF2, 0x78, 0x8B, 0x63, 0x21, 0x8C, 0x00, 0xCB, 0x42}, //0x34 to 0x37
				{0xCD, 0x40, 0x80, 0x1B, 0xB3, 0x4B, 0x8A, 0x9F, 0xE5, 0xBD, 0x58, 0xAD, 0x60, 0x47, 0x1F, 0x6B, 0x88, 0x76, 0x4C, 0x57}, //0x38 to 0x3B
				{0x5C, 0x7F, 0x64, 0xD4, 0xAB, 0x7A, 0xDF, 0xE1, 0x91, 0x05, 0x68, 0x8D, 0x57, 0xB2, 0xBA, 0xAC, 0x52, 0x2A, 0xCE, 0xB7}, //0x3C
				{0x6E, 0x46, 0x09, 0x5C, 0x58, 0x41, 0x3F, 0xC0, 0x8B, 0x54, 0xA8, 0x18, 0x1A, 0x06, 0xBE, 0xDA, 0xEC, 0x00, 0x64, 0xEA}, //0x3D
				{0x3E, 0xC4, 0xF5, 0x2F, 0x27, 0x1C, 0xE4, 0xD6, 0x7F, 0xD1, 0x99, 0x6F, 0xFA, 0x2F, 0x5C, 0xF1, 0xB8, 0x6A, 0x25, 0xE3}, //0x3E
				{0x54, 0xC5, 0x48, 0xD9, 0x21, 0x53, 0xA8, 0x6A, 0xB6, 0xDD, 0x08, 0x6B, 0x82, 0x27, 0x5D, 0x7D, 0x6E, 0x50, 0xB4, 0xB1}  //0x3F
			};
			const static u8 KeyYs[8][20] = {
				{0xEF, 0xCB, 0x89, 0x44, 0x9C, 0x66, 0x72, 0x63, 0x14, 0xF2, 0x0A, 0xE7, 0x77, 0xF7, 0x88, 0x25, 0x45, 0xC4, 0x52, 0x60}, //0x4
				{0x7E, 0x08, 0x93, 0x40, 0x58, 0xB7, 0x00, 0x10, 0xEF, 0x52, 0xCF, 0xE3, 0xEA, 0x64, 0x4A, 0x63, 0xED, 0x6F, 0xA7, 0xE9}, //0x5
				{0xBB, 0x91, 0xFF, 0xF9, 0xEE, 0x77, 0x07, 0x28, 0x25, 0x0C, 0x1F, 0xB3, 0xB4, 0x60, 0x48, 0x12, 0x49, 0x92, 0xB0, 0xF1}, //0x6
				{0x95, 0x41, 0xBC, 0x87, 0xA1, 0x8F, 0xE0, 0xD7, 0x35, 0xF3, 0x50, 0x25, 0xEE, 0xCF, 0x2F, 0x0F, 0xE9, 0x65, 0xF2, 0xF4}, //0x7
				{0x67, 0x3B, 0x82, 0x65, 0xFA, 0x9D, 0xE3, 0x85, 0x83, 0xEA, 0xEF, 0x24, 0xCF, 0xF5, 0xAE, 0x22, 0x33, 0x85, 0xC0, 0x4F}, //0x8
				{0x60, 0xD3, 0x7E, 0xD8, 0x19, 0xD1, 0xFC, 0xD7, 0xE1, 0x06, 0x45, 0xD3, 0x8C, 0xF3, 0xEA, 0x33, 0x9B, 0xFC, 0x1B, 0x14}, //0x9
				{0x03, 0xCC, 0xD8, 0x20, 0xF1, 0xDC, 0x75, 0xA2, 0x10, 0xDE, 0xD6, 0x35, 0x90, 0xA5, 0x30, 0x8E, 0x88, 0x53, 0xFB, 0x0A}, //0xA
				{0xCC, 0x45, 0xD8, 0x77, 0x87, 0x36, 0xD5, 0xB2, 0x27, 0x38, 0x1F, 0x10, 0x65, 0x12, 0x93, 0x2C, 0x25, 0xA0, 0x42, 0x01}  //0xB
			};
			const static u8 KeyNormals[20][20] = {
				{0x80, 0xB9, 0xE5, 0x19, 0xA0, 0x99, 0x0E, 0x38, 0x6B, 0xF8, 0x4F, 0xB9, 0xAE, 0x01, 0xDA, 0x48, 0x8C, 0xA7, 0x5B, 0xBC}, //0xC-0xF
				{0x2B, 0x72, 0x27, 0x63, 0x70, 0x04, 0xD6, 0x08, 0x52, 0x4D, 0xC5, 0x8F, 0x57, 0x69, 0x9A, 0xA4, 0xF8, 0x52, 0x73, 0xD2}, //0x10-0x13
				{0x9C, 0x7A, 0x42, 0x72, 0x91, 0x1B, 0xB6, 0xCC, 0x71, 0x9F, 0x40, 0x90, 0xEB, 0xC2, 0xB0, 0x12, 0x9A, 0x86, 0x73, 0xAD}, //0x14
				{0xFF, 0xBA, 0xD8, 0x55, 0xAA, 0x5E, 0xF3, 0x88, 0x11, 0x9F, 0xEA, 0x2F, 0x68, 0x8D, 0xB4, 0xA5, 0x3C, 0x03, 0xBF, 0x3B}, //0x15
				{0x2E, 0x02, 0xEF, 0xDA, 0x52, 0x8B, 0x68, 0x98, 0x0B, 0x75, 0xB1, 0xD9, 0x7C, 0x31, 0x20, 0xFF, 0x84, 0xFC, 0x8C, 0x61}, //0x16
				{0x66, 0xB2, 0x96, 0x5A, 0x72, 0x12, 0xA3, 0xD8, 0xAB, 0x28, 0x72, 0xFC, 0x14, 0xDC, 0x46, 0xBB, 0xC5, 0x0A, 0xC8, 0x86}, //0x17
				{0x4A, 0xA4, 0x3F, 0x63, 0xF7, 0xEC, 0x2C, 0x6C, 0xFD, 0xF0, 0xD2, 0x80, 0x61, 0xB6, 0x0E, 0xFE, 0xFE, 0x8C, 0x8D, 0xC5}, //0x18-0x1B
				{0x0D, 0x25, 0x38, 0x3A, 0x5D, 0x0D, 0xDF, 0x2C, 0xF6, 0x7A, 0xD6, 0xD1, 0xB7, 0xF5, 0x6F, 0x79, 0x4E, 0x33, 0x3E, 0xB8}, //0x1C-0x1F
				{0x21, 0x1A, 0x66, 0xF4, 0xF0, 0x42, 0xCC, 0xA0, 0x0E, 0xAC, 0x94, 0xB9, 0x7F, 0xDF, 0xDB, 0xF0, 0xCD, 0xD0, 0xCB, 0x12}, //0x20-0x23
				{0x1F, 0xFD, 0x76, 0x04, 0x44, 0x4A, 0x90, 0x0C, 0x89, 0x18, 0xF9, 0xB9, 0x9E, 0x36, 0x6A, 0xCC, 0x8F, 0xDC, 0x13, 0xEE}, //0x24-0x28
				{0xAB, 0x24, 0xD5, 0x3E, 0xE2, 0x1F, 0x68, 0xDC, 0x18, 0x91, 0x69, 0x9A, 0x99, 0xB2, 0x14, 0x69, 0x56, 0xF2, 0xAE, 0x48}, //0x29
				{0x4F, 0x66, 0xF7, 0x5E, 0x78, 0xFE, 0x1A, 0x70, 0x07, 0xFA, 0x97, 0xCF, 0x6D, 0x36, 0x28, 0xC2, 0xC7, 0x00, 0x78, 0x3B}, //0x2A
				{0x5B, 0xC5, 0xCA, 0x60, 0x2B, 0x5A, 0x44, 0x68, 0x4E, 0x27, 0xFC, 0x61, 0xA4, 0x68, 0x57, 0xBE, 0xFF, 0xFE, 0x82, 0xED}, //0x2B
				{0x55, 0x68, 0x3F, 0xD3, 0xF0, 0x54, 0x64, 0xF2, 0x44, 0xEA, 0x74, 0x7F, 0xC9, 0x7F, 0x02, 0x24, 0xC0, 0x28, 0xC6, 0x63}, //0x2C-0x2F
				{0xE2, 0x01, 0x2D, 0xD5, 0xEC, 0x53, 0x80, 0x12, 0x39, 0x5E, 0x42, 0x07, 0x92, 0x4F, 0x0E, 0xD1, 0x77, 0x7A, 0x40, 0x98}, //0x30-0x33
				{0xB3, 0xEB, 0x14, 0x1C, 0xD7, 0xE8, 0x10, 0xF1, 0x53, 0xC3, 0xAB, 0xA6, 0x72, 0x3F, 0x5A, 0x6C, 0x49, 0xFB, 0x50, 0x6E}, //0x34-0x37
				{0xC0, 0x42, 0x58, 0x9F, 0x1D, 0x74, 0xCD, 0x4B, 0x89, 0x8C, 0x86, 0x03, 0xA8, 0x09, 0xC3, 0x60, 0xC8, 0xB9, 0x72, 0xD1}, //0x38-0x3C
				{0x0B, 0x74, 0x91, 0x5F, 0x6F, 0xBF, 0x45, 0xD7, 0xBC, 0xE8, 0x5F, 0x07, 0x64, 0x48, 0xFF, 0xD7, 0xB0, 0xD0, 0xFA, 0x01}, //0x3D
				{0x79, 0x49, 0x71, 0xEC, 0x73, 0x46, 0x1E, 0xD6, 0xAE, 0x0D, 0xED, 0xD4, 0x1E, 0x67, 0x3E, 0x38, 0xBC, 0xD8, 0x92, 0xBB}, //0x3E
				{0x0F, 0xBB, 0xBE, 0x63, 0x1B, 0x80, 0xEF, 0x32, 0x6B, 0x56, 0xC8, 0x0D, 0x7C, 0x9F, 0xB1, 0x5A, 0x99, 0x74, 0xB4, 0x1D}  //0x3F
			};
		}
	}
	namespace Dev {
		static u8 KeyXs[8][16] = {};
		static u8 KeyYs[8][16] = {};
		static u8 KeyNormals[20][16] = {};
		namespace SHA1Checksums {
			const static u8 KeyXs[8][20] = {
				{0x5F, 0xD1, 0xE3, 0x59, 0xFD, 0x54, 0xBA, 0x78, 0x6D, 0xCE, 0x5B, 0x57, 0x57, 0x0C, 0x73, 0xA3, 0x56, 0xDC, 0x29, 0xFC}, //0x2C to 0x2F
				{0xF0, 0xA9, 0x37, 0x21, 0x56, 0xCE, 0x24, 0xA8, 0x17, 0xBE, 0xD2, 0x76, 0xF8, 0x21, 0xE1, 0x88, 0x2B, 0x77, 0x04, 0x82}, //0x30 to 0x33
				{0xF7, 0x60, 0xB4, 0x16, 0x03, 0xE9, 0x61, 0x22, 0x22, 0x86, 0x9C, 0xBC, 0x2C, 0xD5, 0x92, 0x9F, 0x00, 0x09, 0xDC, 0x0E}, //0x34 to 0x37
				{0x11, 0x31, 0x4E, 0x50, 0x0D, 0xEB, 0xB2, 0x7A, 0xB5, 0x58, 0xB9, 0x5C, 0x2F, 0x5B, 0xA1, 0xC7, 0x26, 0x22, 0x3D, 0x12}, //0x38 to 0x3B
				{0x73, 0xE0, 0x98, 0x32, 0x3E, 0x3A, 0xF7, 0xD3, 0x1D, 0x83, 0xFC, 0x4A, 0x4F, 0xDA, 0x12, 0xE7, 0x72, 0x79, 0x98, 0xAD}, //0x3C
				{0x9B, 0x7F, 0x54, 0xF5, 0xD7, 0x57, 0xA6, 0xB6, 0xC5, 0xC6, 0x96, 0x52, 0x92, 0x0E, 0x07, 0x15, 0xE8, 0x06, 0xBF, 0x65}, //0x3D
				{0xE0, 0xAC, 0x06, 0x48, 0xF5, 0x2B, 0x26, 0xE5, 0x36, 0x90, 0x14, 0x51, 0x54, 0xAB, 0xC4, 0x02, 0x17, 0x37, 0x38, 0xF9}, //0x3E
				{0x82, 0x9F, 0xEB, 0x41, 0x00, 0xF3, 0xE2, 0x5C, 0xC2, 0xCE, 0xE7, 0x87, 0x0B, 0x8B, 0x14, 0x6D, 0xD7, 0xED, 0x40, 0x6C}  //0x3F
			};
			const static u8 KeyYs[8][20] = {
				{0x49, 0x91, 0x05, 0xCC, 0x92, 0x13, 0x7D, 0x1A, 0x8E, 0xF5, 0x61, 0x27, 0xEA, 0x8D, 0xCB, 0xC2, 0xAF, 0x24, 0x06, 0xC7}, //0x4
				{0xCD, 0x05, 0xF9, 0x32, 0x31, 0x15, 0x0D, 0x62, 0xF2, 0xC1, 0xA1, 0xB9, 0xA3, 0x78, 0x4B, 0xA7, 0x27, 0xBC, 0x91, 0x6A}, //0x5
				{0xE6, 0xB3, 0xC8, 0x5F, 0x2B, 0xA8, 0xA5, 0x26, 0xBD, 0xEE, 0x09, 0x50, 0x28, 0x34, 0xE5, 0x25, 0xA2, 0xA7, 0x8B, 0x37}, //0x6
				{0x1F, 0xFB, 0xA9, 0x59, 0x04, 0x75, 0xA0, 0x2E, 0x9E, 0xF6, 0x2F, 0x26, 0xDB, 0x87, 0x37, 0x8E, 0xD9, 0x6E, 0x05, 0x3F}, //0x7
				{0x23, 0xD4, 0x6B, 0xAA, 0x25, 0x07, 0xFB, 0xA5, 0x1E, 0x67, 0x2D, 0x6E, 0x68, 0xE0, 0x2A, 0x3D, 0xE5, 0x19, 0xA5, 0xAA}, //0x8
				{0x2D, 0xB2, 0xC0, 0xBD, 0x3A, 0x84, 0x56, 0xE7, 0xDF, 0x7E, 0x9A, 0x5B, 0xBF, 0xB7, 0x69, 0x62, 0x4D, 0x07, 0xC4, 0x6C}, //0x9
				{0xAC, 0x5B, 0xF9, 0x60, 0x47, 0xDE, 0xE9, 0x9C, 0xF8, 0x44, 0xE3, 0x07, 0x1A, 0xD0, 0x3B, 0x86, 0xAF, 0x3B, 0xF7, 0x0C}, //0xA
				{0x73, 0xCD, 0x32, 0xA8, 0xD3, 0x84, 0xDB, 0x01, 0xDE, 0x6D, 0xBC, 0x09, 0x64, 0x87, 0x2D, 0x6F, 0x7C, 0x3C, 0x00, 0xB0}  //0xB
			};
			const static u8 KeyNormals[20][20] = {
				{0xFA, 0x43, 0x55, 0xA3, 0xE1, 0x09, 0x64, 0x1E, 0x86, 0x77, 0xFF, 0x68, 0xE2, 0x4A, 0x89, 0x34, 0x76, 0xB4, 0xE2, 0x4C}, //0xC-0xF
				{0x1D, 0xA5, 0x61, 0x14, 0x95, 0x96, 0xC1, 0x2E, 0x3A, 0xD0, 0x4C, 0x16, 0x66, 0xC0, 0xF2, 0x48, 0xE0, 0x60, 0x41, 0x10}, //0x10-0x13
				{0x5B, 0x35, 0x71, 0x07, 0xE3, 0x28, 0xA7, 0xE6, 0x68, 0x0B, 0x92, 0x16, 0x21, 0x90, 0xB6, 0xD3, 0x0B, 0x85, 0xD2, 0x86}, //0x14
				{0x47, 0x9C, 0x08, 0x35, 0xE8, 0x14, 0xF0, 0x2F, 0xC9, 0x9A, 0xC7, 0xE9, 0x71, 0x4B, 0xC5, 0xB5, 0x60, 0x9C, 0xA6, 0xE6}, //0x15
				{0x13, 0x7C, 0x22, 0xCB, 0x70, 0x99, 0x49, 0xF8, 0x8E, 0xCB, 0x75, 0x0D, 0xC9, 0xCB, 0xCF, 0xAF, 0xD4, 0xA1, 0x22, 0xA2}, //0x16
				{0x99, 0x7E, 0x3C, 0xE5, 0x29, 0x1E, 0xB2, 0x59, 0x57, 0x20, 0xFF, 0x42, 0xDB, 0x40, 0x7C, 0xF5, 0x48, 0x9A, 0x8E, 0x4C}, //0x17
				{0xD6, 0xDE, 0xF8, 0xC4, 0x9E, 0x53, 0x58, 0x60, 0x84, 0xEF, 0xD1, 0xDC, 0xD8, 0xD3, 0xED, 0x01, 0x4B, 0x46, 0xC1, 0x2B}, //0x18-0x1B
				{0x26, 0xCD, 0x9C, 0x0D, 0xC3, 0x82, 0xDB, 0x44, 0xC1, 0x8B, 0xAF, 0x85, 0x43, 0x24, 0x08, 0x9E, 0x82, 0x60, 0x56, 0x7D}, //0x1C-0x1F
				{0xEE, 0x67, 0x1C, 0x64, 0x06, 0x28, 0xC5, 0x68, 0xD4, 0x25, 0x7D, 0x40, 0x8B, 0x68, 0xA2, 0x5C, 0xA2, 0x1C, 0x92, 0x8A}, //0x20-0x23
				{0xE0, 0x46, 0x49, 0x52, 0x62, 0xCA, 0x6A, 0x7E, 0xAC, 0xD6, 0xF4, 0xD8, 0xF1, 0xEF, 0x5A, 0xBD, 0xB8, 0x32, 0x7D, 0xBD}, //0x24-0x28
				{0xF5, 0xAA, 0x19, 0x69, 0x36, 0xE1, 0x99, 0xF9, 0x42, 0x5E, 0x84, 0x84, 0xAB, 0x45, 0x22, 0xB5, 0x2A, 0xE3, 0xD0, 0xB1}, //0x29
				{0xD9, 0xA8, 0xBE, 0xFB, 0xBA, 0x45, 0xF3, 0x95, 0x9F, 0x46, 0x7B, 0x99, 0xD8, 0x73, 0xE3, 0x31, 0x2C, 0xCE, 0x50, 0x82}, //0x2A
				{0x9E, 0x50, 0x10, 0xBE, 0x7E, 0x08, 0xC7, 0xFE, 0x82, 0x49, 0x16, 0x6A, 0xED, 0xE7, 0x8F, 0x5C, 0x4B, 0xB6, 0x66, 0x64}, //0x2B
				{0x76, 0xC2, 0x52, 0xFB, 0x62, 0x88, 0xD5, 0xC4, 0x89, 0x12, 0x87, 0x9B, 0xA3, 0xAF, 0x46, 0x70, 0x60, 0xBA, 0xA6, 0x10}, //0x2C-0x2F
				{0xFD, 0xC9, 0x46, 0x1A, 0x0F, 0x4A, 0xF1, 0x77, 0xFC, 0xFC, 0x36, 0x50, 0xD2, 0xE8, 0x8D, 0xC8, 0xB9, 0x90, 0x80, 0x20}, //0x30-0x33
				{0x95, 0x0D, 0x16, 0xD6, 0xF9, 0xF6, 0xFC, 0xF6, 0xB5, 0xE8, 0xC0, 0xDD, 0x0A, 0x22, 0xC7, 0xE8, 0x16, 0x5B, 0x8D, 0x4C}, //0x34-0x37
				{0xF0, 0x09, 0xBC, 0x18, 0xDE, 0xD6, 0x5A, 0x60, 0x6A, 0x46, 0x52, 0x4A, 0x1D, 0x17, 0x3C, 0xE5, 0xE7, 0x0C, 0xC9, 0x4F}, //0x38-0x3C
				{0x0C, 0xE1, 0x35, 0xAC, 0x5E, 0x48, 0x02, 0xD3, 0x80, 0x3F, 0x93, 0xDD, 0xCC, 0x88, 0x60, 0x95, 0xB6, 0x84, 0x9E, 0x0A}, //0x3D
				{0x85, 0xC6, 0xF9, 0x21, 0x86, 0x6C, 0xC4, 0x2E, 0x03, 0xFE, 0x77, 0x28, 0x19, 0x42, 0xF9, 0xDA, 0x0C, 0xF7, 0x0F, 0xC9}, //0x3E
				{0x45, 0x89, 0x3C, 0x25, 0x09, 0x48, 0x1A, 0xCC, 0xFB, 0xC1, 0x6B, 0xA3, 0xF7, 0xBB, 0x08, 0x3E, 0x7D, 0xD8, 0xAF, 0x92}  //0x3F
			};
		}
	}
	static u8 Constant_C[16] = {};
	const static u8 Constant_C_Sha1[20] = {0x90, 0xEE, 0x1F, 0xF2, 0x9F, 0xD7, 0x03, 0x21, 0x76, 0xAD, 0x6D, 0x22, 0x22, 0xFA, 0x01, 0xC8, 0x4B, 0xA6, 0xBF, 0x88};
	#define swap4bits(x) (((x) << 4 | (x) >> 4) & 0xFF)
	static bool LoadBoot9Protected(FILE* fp) {
		bool success = false;
		auto startoffset = ftell(fp);
		if(startoffset == -1L) return false;
		do {
			if(fseek(fp, 0x59D0, SEEK_CUR)) break;
			if(fread(&Retail::KeyXs[0][0], 1, 128, fp) != 128) break;
			if(fread(&Retail::KeyYs[0][0], 1, 128, fp) != 128) break;
			if(fread(&Retail::KeyNormals[0][0], 1, 320, fp) != 320) break;
			if(fseek(fp, 0x1C0, SEEK_CUR)) break;
			if(fread(&Dev::KeyXs[0][0], 1, 128, fp) != 128) break;
			if(fread(&Dev::KeyYs[0][0], 1, 128, fp) != 128) break;
			if(fread(&Dev::KeyNormals[0][0], 1, 320, fp) != 320) break;
			/* It's either make code that reads from a special file with just the constant c,
			 * or make code that reads the bootrom9 for the first byte and then make it.
			 * Any other devs may feel free to use this as-is.
			 * You can either load chunks of the other keys, or load only the first part and do this.
			 * Objective here was, not have any constants,
			 * besides the amount of shifts and buffer offsets.
			 */
			Constant_C[0] = Retail::KeyXs[0][8]; //same byte as first const C byte
			Constant_C[8] = (Constant_C[0] >> 4) << 1;
			Constant_C[6] = Constant_C[8] << 1;
			Constant_C[7] = Constant_C[8] << 2;
			Constant_C[1] = swap4bits(Constant_C[0]) + Constant_C[7];
			Constant_C[2] = Constant_C[1] - swap4bits((Constant_C[0] >> 4));
			Constant_C[3] = Constant_C[7] | Constant_C[8];
			Constant_C[4] = ((Constant_C[6] | Constant_C[7]) << 4) | (Constant_C[3] >> 1);
			Constant_C[15] = (Constant_C[7] << 4) | Constant_C[3];
			Constant_C[3] |= Constant_C[3] << 4;
			Constant_C[5] = ~(Constant_C[0] >> 4);
			Constant_C[10] = (Constant_C[0] >> 4) | (Constant_C[1] << 4);
			Constant_C[11] = swap4bits(Constant_C[4] + Constant_C[7]);
			Constant_C[12] = swap4bits(Constant_C[4]) + (Constant_C[0] >> 4);
			Constant_C[13] = swap4bits(Constant_C[4]) - (Constant_C[7] | Constant_C[8]);
			Constant_C[9] = swap4bits(Constant_C[13] + Constant_C[8]);
			Constant_C[14] = Constant_C[6] | Constant_C[8];
			Constant_C[14] |= (Constant_C[14] + (Constant_C[0] >> 4)) << 4;
			u8 shabuf[20];
			bool checkpass = true;
			for(int i = 0; checkpass && i < 8; i++) {
				SHA1(Retail::KeyXs[i], 16, shabuf);
				if(memcmp(shabuf, Retail::SHA1Checksums::KeyXs[i], 20)) {
					checkpass = false;
					break;
				}
				SHA1(Retail::KeyYs[i], 16, shabuf);
				if(memcmp(shabuf, Retail::SHA1Checksums::KeyYs[i], 20)) {
					checkpass = false;
					break;
				}
				SHA1(Dev::KeyXs[i], 16, shabuf);
				if(memcmp(shabuf, Dev::SHA1Checksums::KeyXs[i], 20)) {
					checkpass = false;
					break;
				}
				SHA1(Dev::KeyYs[i], 16, shabuf);
				if(memcmp(shabuf, Dev::SHA1Checksums::KeyYs[i], 20))
					checkpass = false;
			}
			for(int i = 0; checkpass && i < 20; i++) {
				SHA1(Retail::KeyNormals[i], 16, shabuf);
				if(memcmp(shabuf, Retail::SHA1Checksums::KeyNormals[i], 20)) {
					checkpass = false;
					break;
				}
				SHA1(Dev::KeyNormals[i], 16, shabuf);
				if(memcmp(shabuf, Dev::SHA1Checksums::KeyNormals[i], 20))
					checkpass = false;
			}
			if(!checkpass) break;
			SHA1(Constant_C, 16, shabuf);
			if(memcmp(shabuf, Constant_C_Sha1, 20)) break;
			success = true;
		} while(0);
		fseek(fp, startoffset, SEEK_SET);
		return success;
	}
}

void NintendoData::KeyUtils::Storage::ReloadStorage() {
	FILE* fp = NULL;
	bool res = false;
	if(!NintendoData::SharedStorage::Load(fp, "boot9.bin")) {
		if(!fseek(fp, 0x8000, SEEK_SET))
			res = ::LoadBoot9Protected(fp);
		fclose(fp);
	}
	if(!res && !NintendoData::SharedStorage::Load(fp, "boot9_protected.bin")) {
		::LoadBoot9Protected(fp);
		fclose(fp);
	}
}

const u8* NintendoData::KeyUtils::Storage::GetKey(int keyslot, NintendoData::KeyUtils::Storage::KeyType type, bool retail) {
	if(type != KeyX && type != KeyY && type != KeyNormal) return NULL;
	else if(type == KeyX && (keyslot < 0x2C || keyslot > 0x3F)) return NULL;
	else if(type == KeyY && (keyslot < 0x4 || keyslot > 0xB)) return NULL;
	else if(keyslot < 0xC || keyslot > 0x3F) return NULL;
	const u8* key = NULL;
	const u8* sha = NULL;
	if(type == KeyY) {
		key = (retail ? Retail::KeyYs[keyslot-0x4] : Dev::KeyYs[keyslot-0x4]);
		sha = (retail ? Retail::SHA1Checksums::KeyYs[keyslot-0x4] : Dev::SHA1Checksums::KeyYs[keyslot-0x4]);
	} else if(type == KeyX) {
		int index;
		if(keyslot >= 0x2C && keyslot < 0x30) index = 0;
		else if(keyslot >= 0x30 && keyslot < 0x34) index = 1;
		else if(keyslot >= 0x34 && keyslot < 0x38) index = 2;
		else if(keyslot >= 0x38 && keyslot < 0x3C) index = 3;
		else index = keyslot - 0x38;
		key = (retail ? Retail::KeyXs[index] : Dev::KeyXs[index]);
		sha = (retail ? Retail::SHA1Checksums::KeyXs[index] : Dev::SHA1Checksums::KeyXs[index]);
	} else {
		int index;
		if(keyslot >= 0xC && keyslot < 0x10) index = 0;
		else if(keyslot >= 0x10 && keyslot < 0x14) index = 1;
		else if(keyslot >= 0x14 && keyslot < 0x18) index = keyslot - 0x12;
		else if(keyslot >= 0x18 && keyslot < 0x1C) index = 6;
		else if(keyslot >= 0x1C && keyslot < 0x20) index = 7;
		else if(keyslot >= 0x20 && keyslot < 0x24) index = 8;
		else if(keyslot >= 0x24 && keyslot < 0x29) index = 9;
		else if(keyslot >= 0x29 && keyslot < 0x2C) index = keyslot - 0x1F;
		else if(keyslot >= 0x2C && keyslot < 0x30) index = 13;
		else if(keyslot >= 0x30 && keyslot < 0x34) index = 14;
		else if(keyslot >= 0x34 && keyslot < 0x38) index = 15;
		else if(keyslot >= 0x38 && keyslot < 0x3C) index = 16;
		else index = keyslot - 0x2C;
		key = (retail ? Retail::KeyNormals[index] : Dev::KeyNormals[index]);
		sha = (retail ? Retail::SHA1Checksums::KeyNormals[index] : Dev::SHA1Checksums::KeyNormals[index]);
	}
	u8 shabuf[20];
	SHA1(key, 16, shabuf);
	if(memcmp(shabuf, sha, 20)) key = NULL;
	return key;
}

bool NintendoData::KeyUtils::Scrambler(u8* outnormal, const u8* keyX, const u8* keyY) {
	if(!outnormal || !keyX || !keyY) return false;
	u8 shabuf[20];
	SHA1(Constant_C, 16, shabuf);
	if(memcmp(shabuf, Constant_C_Sha1, 20)) return false;
	BIGNUM* key1 = BN_bin2bn(keyX, 16, NULL);
	BIGNUM* key2 = BN_bin2bn(keyY, 16, NULL);
	BIGNUM* worknum = BN_new();
	bool success = false;
	do {
		if(!key1 || !key2 || !worknum) break;
		if(!BN_lshift(worknum, key1, 2)) break;
		if(BN_num_bits(worknum) > 128)
			BN_mask_bits(worknum, 128);
		//why is there no xor nor and on openssl's BN??
		if(!BN_rshift(key1, key1, 126)) break;
		if(!BN_add(worknum, key1, worknum)) break;
		bool xorpass = true;
		for(int i = 0; i < 128; i++) {
			if(BN_is_bit_set(worknum, i) ^ BN_is_bit_set(key2, i)) {
				if(!BN_set_bit(worknum, i)) {
					xorpass = false;
					break;
				}
			}
			else if(BN_num_bits(worknum) > i) {
				if(!BN_clear_bit(worknum, i)) {
					xorpass = false;
					break;
				}
			}
		}
		if(!xorpass) break;
		if(!BN_bin2bn(Constant_C, 16, key2)) break;
		if(!BN_add(worknum, worknum, key2)) break;
		if(BN_num_bits(worknum) > 128)
			BN_mask_bits(worknum, 128);
		if(!BN_lshift(key1, worknum, 87)) break;
		if(BN_num_bits(key1) > 128)
			BN_mask_bits(key1, 128);
		if(!BN_rshift(worknum, worknum, 41)) break;
		if(!BN_add(key2, key1, worknum)) break;
		if(BN_bn2binpad(key2, outnormal, 16) != 16) break;
		success = true;
	} while(0);
	BN_clear_free(key1);
	BN_clear_free(key2);
	BN_clear_free(worknum);
	return success;
}

void NintendoData::KeyUtils::SeedKeyY(u8* keyY, const u8* seed) {
	u8 shabuf[32];
	u8 keyseed[32];
	memcpy(keyseed, keyY, 16);
	memcpy(keyseed+16, seed, 16);
	SHA256(keyseed, 32, shabuf);
	memcpy(keyY, shabuf, 16);
}